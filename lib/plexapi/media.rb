# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Media
    # API Calls interacting with Plex Media Server Media
    # 
    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(key: Float).returns(Utils::FieldAugmented) }
    def mark_played(key)
      # mark_played - Mark Media Played
      # This will mark the provided media key as Played.
      request = Operations::MarkPlayedRequest.new(
        
        key: key
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/:/scrobble"
      headers = {}
      query_params = Utils.get_query_params(Operations::MarkPlayedRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarkPlayedResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::MarkPlayedResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(key: Float).returns(Utils::FieldAugmented) }
    def mark_unplayed(key)
      # mark_unplayed - Mark Media Unplayed
      # This will mark the provided media key as Unplayed.
      request = Operations::MarkUnplayedRequest.new(
        
        key: key
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/:/unscrobble"
      headers = {}
      query_params = Utils.get_query_params(Operations::MarkUnplayedRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarkUnplayedResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::MarkUnplayedResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(key: String, time: Float, state: String).returns(Utils::FieldAugmented) }
    def update_play_progress(key, time, state)
      # update_play_progress - Update Media Play Progress
      # This API command can be used to update the play progress of a media item.
      # 
      request = Operations::UpdatePlayProgressRequest.new(
        
        key: key,
        time: time,
        state: state
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/:/progress"
      headers = {}
      query_params = Utils.get_query_params(Operations::UpdatePlayProgressRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdatePlayProgressResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::UpdatePlayProgressResponseBody)
          res.object = out
        end
      end
      res
    end
  end
end
