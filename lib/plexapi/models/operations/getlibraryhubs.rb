# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations
    # QueryParamOnlyTransient - Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
    class QueryParamOnlyTransient < T::Enum
      enums do
        ZERO = new(0)
        ONE = new(1)
      end
    end



    class GetLibraryHubsRequest < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # the Id of the library to query
      field :section_id, Float, { 'path_param': { 'field_name': 'sectionId', 'style': 'simple', 'explode': false } }
      # The number of items to return with each hub.
      field :count, T.nilable(Float), { 'query_param': { 'field_name': 'count', 'style': 'form', 'explode': true } }
      # Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
      field :only_transient, T.nilable(Operations::QueryParamOnlyTransient), { 'query_param': { 'field_name': 'onlyTransient', 'style': 'form', 'explode': true } }


      sig { params(section_id: Float, count: T.nilable(Float), only_transient: T.nilable(Operations::QueryParamOnlyTransient)).void }
      def initialize(section_id: nil, count: nil, only_transient: nil)
        @section_id = section_id
        @count = count
        @only_transient = only_transient
      end
    end


    class GetLibraryHubsErrors < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message') } }

      field :status, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }


      sig { params(code: T.nilable(Float), message: T.nilable(String), status: T.nilable(Float)).void }
      def initialize(code: nil, message: nil, status: nil)
        @code = code
        @message = message
        @status = status
      end
    end

    # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
    class GetLibraryHubsHubsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :errors, T.nilable(T::Array[Operations::GetLibraryHubsErrors]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('errors') } }


      sig { params(errors: T.nilable(T::Array[Operations::GetLibraryHubsErrors])).void }
      def initialize(errors: nil)
        @errors = errors
      end
    end


    class GetLibraryHubsPart < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :audio_profile, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioProfile') } }

      field :container, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('container') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :file, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('file') } }

      field :has64bit_offsets, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('has64bitOffsets') } }

      field :id, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :optimized_for_streaming, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('optimizedForStreaming') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }

      field :video_profile, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoProfile') } }


      sig { params(audio_profile: T.nilable(String), container: T.nilable(String), duration: T.nilable(Integer), file: T.nilable(String), has64bit_offsets: T.nilable(T::Boolean), id: T.nilable(Integer), key: T.nilable(String), optimized_for_streaming: T.nilable(T::Boolean), size: T.nilable(Integer), video_profile: T.nilable(String)).void }
      def initialize(audio_profile: nil, container: nil, duration: nil, file: nil, has64bit_offsets: nil, id: nil, key: nil, optimized_for_streaming: nil, size: nil, video_profile: nil)
        @audio_profile = audio_profile
        @container = container
        @duration = duration
        @file = file
        @has64bit_offsets = has64bit_offsets
        @id = id
        @key = key
        @optimized_for_streaming = optimized_for_streaming
        @size = size
        @video_profile = video_profile
      end
    end


    class GetLibraryHubsMedia < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :aspect_ratio, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('aspectRatio') } }

      field :audio_channels, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioChannels') } }

      field :audio_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioCodec') } }

      field :audio_profile, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioProfile') } }

      field :bitrate, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bitrate') } }

      field :container, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('container') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :has64bit_offsets, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('has64bitOffsets') } }

      field :height, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('height') } }

      field :id, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :optimized_for_streaming, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('optimizedForStreaming') } }

      field :part, T.nilable(T::Array[Operations::GetLibraryHubsPart]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Part') } }

      field :video_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoCodec') } }

      field :video_frame_rate, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoFrameRate') } }

      field :video_profile, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoProfile') } }

      field :video_resolution, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoResolution') } }

      field :width, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('width') } }


      sig { params(aspect_ratio: T.nilable(Float), audio_channels: T.nilable(Integer), audio_codec: T.nilable(String), audio_profile: T.nilable(String), bitrate: T.nilable(Integer), container: T.nilable(String), duration: T.nilable(Integer), has64bit_offsets: T.nilable(T::Boolean), height: T.nilable(Integer), id: T.nilable(Integer), optimized_for_streaming: T.nilable(Integer), part: T.nilable(T::Array[Operations::GetLibraryHubsPart]), video_codec: T.nilable(String), video_frame_rate: T.nilable(String), video_profile: T.nilable(String), video_resolution: T.nilable(String), width: T.nilable(Integer)).void }
      def initialize(aspect_ratio: nil, audio_channels: nil, audio_codec: nil, audio_profile: nil, bitrate: nil, container: nil, duration: nil, has64bit_offsets: nil, height: nil, id: nil, optimized_for_streaming: nil, part: nil, video_codec: nil, video_frame_rate: nil, video_profile: nil, video_resolution: nil, width: nil)
        @aspect_ratio = aspect_ratio
        @audio_channels = audio_channels
        @audio_codec = audio_codec
        @audio_profile = audio_profile
        @bitrate = bitrate
        @container = container
        @duration = duration
        @has64bit_offsets = has64bit_offsets
        @height = height
        @id = id
        @optimized_for_streaming = optimized_for_streaming
        @part = part
        @video_codec = video_codec
        @video_frame_rate = video_frame_rate
        @video_profile = video_profile
        @video_resolution = video_resolution
        @width = width
      end
    end


    class GetLibraryHubsGenre < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :tag, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tag') } }


      sig { params(tag: T.nilable(String)).void }
      def initialize(tag: nil)
        @tag = tag
      end
    end


    class GetLibraryHubsCountry < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :tag, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tag') } }


      sig { params(tag: T.nilable(String)).void }
      def initialize(tag: nil)
        @tag = tag
      end
    end


    class GetLibraryHubsDirector < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :tag, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tag') } }


      sig { params(tag: T.nilable(String)).void }
      def initialize(tag: nil)
        @tag = tag
      end
    end


    class GetLibraryHubsRole < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :tag, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tag') } }


      sig { params(tag: T.nilable(String)).void }
      def initialize(tag: nil)
        @tag = tag
      end
    end


    class GetLibraryHubsWriter < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :tag, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tag') } }


      sig { params(tag: T.nilable(String)).void }
      def initialize(tag: nil)
        @tag = tag
      end
    end


    class GetLibraryHubsMetadata < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :added_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('addedAt') } }

      field :art, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('art') } }

      field :audience_rating, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audienceRating') } }

      field :audience_rating_image, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audienceRatingImage') } }

      field :chapter_source, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('chapterSource') } }

      field :content_rating, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contentRating') } }

      field :country, T.nilable(T::Array[Operations::GetLibraryHubsCountry]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Country') } }

      field :director, T.nilable(T::Array[Operations::GetLibraryHubsDirector]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Director') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :genre, T.nilable(T::Array[Operations::GetLibraryHubsGenre]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Genre') } }

      field :guid, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('guid') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :last_viewed_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('lastViewedAt') } }

      field :library_section_id, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionID') } }

      field :library_section_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionKey') } }

      field :library_section_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionTitle') } }

      field :media, T.nilable(T::Array[Operations::GetLibraryHubsMedia]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Media') } }

      field :originally_available_at, T.nilable(Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('originallyAvailableAt'), 'decoder': Utils.date_from_iso_format(true) } }

      field :primary_extra_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('primaryExtraKey') } }

      field :rating, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('rating') } }

      field :rating_image, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ratingImage') } }

      field :rating_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ratingKey') } }

      field :role, T.nilable(T::Array[Operations::GetLibraryHubsRole]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Role') } }

      field :skip_count, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('skipCount') } }

      field :studio, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('studio') } }

      field :summary, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('summary') } }

      field :tagline, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tagline') } }

      field :thumb, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('thumb') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

      field :type, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }

      field :updated_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updatedAt') } }

      field :view_count, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('viewCount') } }

      field :writer, T.nilable(T::Array[Operations::GetLibraryHubsWriter]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Writer') } }

      field :year, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('year') } }


      sig { params(added_at: T.nilable(Integer), art: T.nilable(String), audience_rating: T.nilable(Float), audience_rating_image: T.nilable(String), chapter_source: T.nilable(String), content_rating: T.nilable(String), country: T.nilable(T::Array[Operations::GetLibraryHubsCountry]), director: T.nilable(T::Array[Operations::GetLibraryHubsDirector]), duration: T.nilable(Integer), genre: T.nilable(T::Array[Operations::GetLibraryHubsGenre]), guid: T.nilable(String), key: T.nilable(String), last_viewed_at: T.nilable(Integer), library_section_id: T.nilable(Integer), library_section_key: T.nilable(String), library_section_title: T.nilable(String), media: T.nilable(T::Array[Operations::GetLibraryHubsMedia]), originally_available_at: T.nilable(Date), primary_extra_key: T.nilable(String), rating: T.nilable(Float), rating_image: T.nilable(String), rating_key: T.nilable(String), role: T.nilable(T::Array[Operations::GetLibraryHubsRole]), skip_count: T.nilable(Integer), studio: T.nilable(String), summary: T.nilable(String), tagline: T.nilable(String), thumb: T.nilable(String), title: T.nilable(String), type: T.nilable(String), updated_at: T.nilable(Integer), view_count: T.nilable(Integer), writer: T.nilable(T::Array[Operations::GetLibraryHubsWriter]), year: T.nilable(Integer)).void }
      def initialize(added_at: nil, art: nil, audience_rating: nil, audience_rating_image: nil, chapter_source: nil, content_rating: nil, country: nil, director: nil, duration: nil, genre: nil, guid: nil, key: nil, last_viewed_at: nil, library_section_id: nil, library_section_key: nil, library_section_title: nil, media: nil, originally_available_at: nil, primary_extra_key: nil, rating: nil, rating_image: nil, rating_key: nil, role: nil, skip_count: nil, studio: nil, summary: nil, tagline: nil, thumb: nil, title: nil, type: nil, updated_at: nil, view_count: nil, writer: nil, year: nil)
        @added_at = added_at
        @art = art
        @audience_rating = audience_rating
        @audience_rating_image = audience_rating_image
        @chapter_source = chapter_source
        @content_rating = content_rating
        @country = country
        @director = director
        @duration = duration
        @genre = genre
        @guid = guid
        @key = key
        @last_viewed_at = last_viewed_at
        @library_section_id = library_section_id
        @library_section_key = library_section_key
        @library_section_title = library_section_title
        @media = media
        @originally_available_at = originally_available_at
        @primary_extra_key = primary_extra_key
        @rating = rating
        @rating_image = rating_image
        @rating_key = rating_key
        @role = role
        @skip_count = skip_count
        @studio = studio
        @summary = summary
        @tagline = tagline
        @thumb = thumb
        @title = title
        @type = type
        @updated_at = updated_at
        @view_count = view_count
        @writer = writer
        @year = year
      end
    end


    class GetLibraryHubsHub < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :context, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('context') } }

      field :hub_identifier, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hubIdentifier') } }

      field :hub_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hubKey') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :metadata, T.nilable(T::Array[Operations::GetLibraryHubsMetadata]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Metadata') } }

      field :more, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('more') } }

      field :promoted, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('promoted') } }

      field :random, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('random') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }

      field :style, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('style') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

      field :type, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }


      sig { params(context: T.nilable(String), hub_identifier: T.nilable(String), hub_key: T.nilable(String), key: T.nilable(String), metadata: T.nilable(T::Array[Operations::GetLibraryHubsMetadata]), more: T.nilable(T::Boolean), promoted: T.nilable(T::Boolean), random: T.nilable(T::Boolean), size: T.nilable(Integer), style: T.nilable(String), title: T.nilable(String), type: T.nilable(String)).void }
      def initialize(context: nil, hub_identifier: nil, hub_key: nil, key: nil, metadata: nil, more: nil, promoted: nil, random: nil, size: nil, style: nil, title: nil, type: nil)
        @context = context
        @hub_identifier = hub_identifier
        @hub_key = hub_key
        @key = key
        @metadata = metadata
        @more = more
        @promoted = promoted
        @random = random
        @size = size
        @style = style
        @title = title
        @type = type
      end
    end


    class GetLibraryHubsMediaContainer < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :allow_sync, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('allowSync') } }

      field :hub, T.nilable(T::Array[Operations::GetLibraryHubsHub]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Hub') } }

      field :identifier, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('identifier') } }

      field :library_section_id, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionID') } }

      field :library_section_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionTitle') } }

      field :library_section_uuid, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionUUID') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }


      sig { params(allow_sync: T.nilable(T::Boolean), hub: T.nilable(T::Array[Operations::GetLibraryHubsHub]), identifier: T.nilable(String), library_section_id: T.nilable(Integer), library_section_title: T.nilable(String), library_section_uuid: T.nilable(String), size: T.nilable(Integer)).void }
      def initialize(allow_sync: nil, hub: nil, identifier: nil, library_section_id: nil, library_section_title: nil, library_section_uuid: nil, size: nil)
        @allow_sync = allow_sync
        @hub = hub
        @identifier = identifier
        @library_section_id = library_section_id
        @library_section_title = library_section_title
        @library_section_uuid = library_section_uuid
        @size = size
      end
    end

    # The hubs specific to the library
    class GetLibraryHubsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :media_container, T.nilable(Operations::GetLibraryHubsMediaContainer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('MediaContainer') } }


      sig { params(media_container: T.nilable(Operations::GetLibraryHubsMediaContainer)).void }
      def initialize(media_container: nil)
        @media_container = media_container
      end
    end


    class GetLibraryHubsResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # The hubs specific to the library
      field :two_hundred_application_json_object, T.nilable(Operations::GetLibraryHubsResponseBody)
      # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
      field :four_hundred_and_one_application_json_object, T.nilable(Operations::GetLibraryHubsHubsResponseBody)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, two_hundred_application_json_object: T.nilable(Operations::GetLibraryHubsResponseBody), four_hundred_and_one_application_json_object: T.nilable(Operations::GetLibraryHubsHubsResponseBody)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, two_hundred_application_json_object: nil, four_hundred_and_one_application_json_object: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @two_hundred_application_json_object = two_hundred_application_json_object
        @four_hundred_and_one_application_json_object = four_hundred_and_one_application_json_object
      end
    end
  end
end
