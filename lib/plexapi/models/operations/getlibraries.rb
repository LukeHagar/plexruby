# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class GetLibrariesErrors < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message') } }

      field :status, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }


      sig { params(code: T.nilable(Float), message: T.nilable(String), status: T.nilable(Float)).void }
      def initialize(code: nil, message: nil, status: nil)
        @code = code
        @message = message
        @status = status
      end
    end

    # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
    class GetLibrariesLibraryResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :errors, T.nilable(T::Array[Operations::GetLibrariesErrors]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('errors') } }


      sig { params(errors: T.nilable(T::Array[Operations::GetLibrariesErrors])).void }
      def initialize(errors: nil)
        @errors = errors
      end
    end


    class Location < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :id, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :path, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('path') } }


      sig { params(id: T.nilable(Integer), path: T.nilable(String)).void }
      def initialize(id: nil, path: nil)
        @id = id
        @path = path
      end
    end


    class GetLibrariesDirectory < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :agent, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('agent') } }

      field :allow_sync, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('allowSync') } }

      field :art, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('art') } }

      field :composite, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('composite') } }

      field :content, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('content') } }

      field :content_changed_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contentChangedAt') } }

      field :created_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('createdAt') } }

      field :directory, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('directory') } }

      field :filters, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('filters') } }

      field :hidden, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hidden') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :language, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('language') } }

      field :location, T.nilable(T::Array[Operations::Location]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Location') } }

      field :refreshing, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('refreshing') } }

      field :scanned_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('scannedAt') } }

      field :scanner, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('scanner') } }

      field :thumb, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('thumb') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

      field :type, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }

      field :updated_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updatedAt') } }

      field :uuid, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }


      sig { params(agent: T.nilable(String), allow_sync: T.nilable(T::Boolean), art: T.nilable(String), composite: T.nilable(String), content: T.nilable(T::Boolean), content_changed_at: T.nilable(Integer), created_at: T.nilable(Integer), directory: T.nilable(T::Boolean), filters: T.nilable(T::Boolean), hidden: T.nilable(Integer), key: T.nilable(String), language: T.nilable(String), location: T.nilable(T::Array[Operations::Location]), refreshing: T.nilable(T::Boolean), scanned_at: T.nilable(Integer), scanner: T.nilable(String), thumb: T.nilable(String), title: T.nilable(String), type: T.nilable(String), updated_at: T.nilable(Integer), uuid: T.nilable(String)).void }
      def initialize(agent: nil, allow_sync: nil, art: nil, composite: nil, content: nil, content_changed_at: nil, created_at: nil, directory: nil, filters: nil, hidden: nil, key: nil, language: nil, location: nil, refreshing: nil, scanned_at: nil, scanner: nil, thumb: nil, title: nil, type: nil, updated_at: nil, uuid: nil)
        @agent = agent
        @allow_sync = allow_sync
        @art = art
        @composite = composite
        @content = content
        @content_changed_at = content_changed_at
        @created_at = created_at
        @directory = directory
        @filters = filters
        @hidden = hidden
        @key = key
        @language = language
        @location = location
        @refreshing = refreshing
        @scanned_at = scanned_at
        @scanner = scanner
        @thumb = thumb
        @title = title
        @type = type
        @updated_at = updated_at
        @uuid = uuid
      end
    end


    class GetLibrariesMediaContainer < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :allow_sync, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('allowSync') } }

      field :directory, T.nilable(T::Array[Operations::GetLibrariesDirectory]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Directory') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }

      field :title1, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title1') } }


      sig { params(allow_sync: T.nilable(T::Boolean), directory: T.nilable(T::Array[Operations::GetLibrariesDirectory]), size: T.nilable(Integer), title1: T.nilable(String)).void }
      def initialize(allow_sync: nil, directory: nil, size: nil, title1: nil)
        @allow_sync = allow_sync
        @directory = directory
        @size = size
        @title1 = title1
      end
    end

    # The libraries available on the Server
    class GetLibrariesResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :media_container, T.nilable(Operations::GetLibrariesMediaContainer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('MediaContainer') } }


      sig { params(media_container: T.nilable(Operations::GetLibrariesMediaContainer)).void }
      def initialize(media_container: nil)
        @media_container = media_container
      end
    end


    class GetLibrariesResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # The libraries available on the Server
      field :two_hundred_application_json_object, T.nilable(Operations::GetLibrariesResponseBody)
      # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
      field :four_hundred_and_one_application_json_object, T.nilable(Operations::GetLibrariesLibraryResponseBody)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, two_hundred_application_json_object: T.nilable(Operations::GetLibrariesResponseBody), four_hundred_and_one_application_json_object: T.nilable(Operations::GetLibrariesLibraryResponseBody)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, two_hundred_application_json_object: nil, four_hundred_and_one_application_json_object: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @two_hundred_application_json_object = two_hundred_application_json_object
        @four_hundred_and_one_application_json_object = four_hundred_and_one_application_json_object
      end
    end
  end
end
