# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class GetServerActivitiesErrors < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('message') } }

      field :status, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('status') } }


      sig { params(code: T.nilable(Float), message: T.nilable(String), status: T.nilable(Float)).void }
      def initialize(code: nil, message: nil, status: nil)
        @code = code
        @message = message
        @status = status
      end
    end

    # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
    class GetServerActivitiesActivitiesResponseBody < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :errors, T.nilable(T::Array[Operations::GetServerActivitiesErrors]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('errors') } }


      sig { params(errors: T.nilable(T::Array[Operations::GetServerActivitiesErrors])).void }
      def initialize(errors: nil)
        @errors = errors
      end
    end


    class Context < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :library_section_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('librarySectionID') } }


      sig { params(library_section_id: T.nilable(String)).void }
      def initialize(library_section_id: nil)
        @library_section_id = library_section_id
      end
    end


    class Activity < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :cancellable, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('cancellable') } }

      field :context, T.nilable(Operations::Context), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('Context') } }

      field :progress, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('progress') } }

      field :subtitle, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('subtitle') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('title') } }

      field :type, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type') } }

      field :user_id, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('userID') } }

      field :uuid, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('uuid') } }


      sig { params(cancellable: T.nilable(T::Boolean), context: T.nilable(Operations::Context), progress: T.nilable(Float), subtitle: T.nilable(String), title: T.nilable(String), type: T.nilable(String), user_id: T.nilable(Float), uuid: T.nilable(String)).void }
      def initialize(cancellable: nil, context: nil, progress: nil, subtitle: nil, title: nil, type: nil, user_id: nil, uuid: nil)
        @cancellable = cancellable
        @context = context
        @progress = progress
        @subtitle = subtitle
        @title = title
        @type = type
        @user_id = user_id
        @uuid = uuid
      end
    end


    class GetServerActivitiesMediaContainer < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :activity, T.nilable(T::Array[Operations::Activity]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('Activity') } }

      field :size, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('size') } }


      sig { params(activity: T.nilable(T::Array[Operations::Activity]), size: T.nilable(Float)).void }
      def initialize(activity: nil, size: nil)
        @activity = activity
        @size = size
      end
    end

    # The Server Activities
    class GetServerActivitiesResponseBody < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :media_container, T.nilable(Operations::GetServerActivitiesMediaContainer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('MediaContainer') } }


      sig { params(media_container: T.nilable(Operations::GetServerActivitiesMediaContainer)).void }
      def initialize(media_container: nil)
        @media_container = media_container
      end
    end


    class GetServerActivitiesResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # The Server Activities
      field :two_hundred_application_json_object, T.nilable(Operations::GetServerActivitiesResponseBody)
      # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
      field :four_hundred_and_one_application_json_object, T.nilable(Operations::GetServerActivitiesActivitiesResponseBody)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, two_hundred_application_json_object: T.nilable(Operations::GetServerActivitiesResponseBody), four_hundred_and_one_application_json_object: T.nilable(Operations::GetServerActivitiesActivitiesResponseBody)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, two_hundred_application_json_object: nil, four_hundred_and_one_application_json_object: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @two_hundred_application_json_object = two_hundred_application_json_object
        @four_hundred_and_one_application_json_object = four_hundred_and_one_application_json_object
      end
    end
  end
end
