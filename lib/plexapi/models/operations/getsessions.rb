# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class GetSessionsErrors < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message') } }

      field :status, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }


      sig { params(code: T.nilable(Float), message: T.nilable(String), status: T.nilable(Float)).void }
      def initialize(code: nil, message: nil, status: nil)
        @code = code
        @message = message
        @status = status
      end
    end

    # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
    class GetSessionsSessionsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :errors, T.nilable(T::Array[Operations::GetSessionsErrors]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('errors') } }


      sig { params(errors: T.nilable(T::Array[Operations::GetSessionsErrors])).void }
      def initialize(errors: nil)
        @errors = errors
      end
    end


    class GetSessionsStream < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :album_gain, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('albumGain') } }

      field :album_peak, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('albumPeak') } }

      field :album_range, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('albumRange') } }

      field :audio_channel_layout, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioChannelLayout') } }

      field :bit_depth, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bitDepth') } }

      field :bitrate, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bitrate') } }

      field :channels, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('channels') } }

      field :codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('codec') } }

      field :display_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('displayTitle') } }

      field :extended_display_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('extendedDisplayTitle') } }

      field :gain, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('gain') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :index, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('index') } }

      field :location, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('location') } }

      field :loudness, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('loudness') } }

      field :lra, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('lra') } }

      field :peak, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('peak') } }

      field :sampling_rate, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('samplingRate') } }

      field :selected, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('selected') } }

      field :stream_type, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('streamType') } }


      sig { params(album_gain: T.nilable(String), album_peak: T.nilable(String), album_range: T.nilable(String), audio_channel_layout: T.nilable(String), bit_depth: T.nilable(Integer), bitrate: T.nilable(Integer), channels: T.nilable(Integer), codec: T.nilable(String), display_title: T.nilable(String), extended_display_title: T.nilable(String), gain: T.nilable(String), id: T.nilable(String), index: T.nilable(Integer), location: T.nilable(String), loudness: T.nilable(String), lra: T.nilable(String), peak: T.nilable(String), sampling_rate: T.nilable(Integer), selected: T.nilable(T::Boolean), stream_type: T.nilable(Integer)).void }
      def initialize(album_gain: nil, album_peak: nil, album_range: nil, audio_channel_layout: nil, bit_depth: nil, bitrate: nil, channels: nil, codec: nil, display_title: nil, extended_display_title: nil, gain: nil, id: nil, index: nil, location: nil, loudness: nil, lra: nil, peak: nil, sampling_rate: nil, selected: nil, stream_type: nil)
        @album_gain = album_gain
        @album_peak = album_peak
        @album_range = album_range
        @audio_channel_layout = audio_channel_layout
        @bit_depth = bit_depth
        @bitrate = bitrate
        @channels = channels
        @codec = codec
        @display_title = display_title
        @extended_display_title = extended_display_title
        @gain = gain
        @id = id
        @index = index
        @location = location
        @loudness = loudness
        @lra = lra
        @peak = peak
        @sampling_rate = sampling_rate
        @selected = selected
        @stream_type = stream_type
      end
    end


    class GetSessionsPart < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :container, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('container') } }

      field :decision, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('decision') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :file, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('file') } }

      field :has_thumbnail, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hasThumbnail') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :selected, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('selected') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }

      field :stream, T.nilable(T::Array[Operations::GetSessionsStream]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Stream') } }


      sig { params(container: T.nilable(String), decision: T.nilable(String), duration: T.nilable(Integer), file: T.nilable(String), has_thumbnail: T.nilable(String), id: T.nilable(String), key: T.nilable(String), selected: T.nilable(T::Boolean), size: T.nilable(Integer), stream: T.nilable(T::Array[Operations::GetSessionsStream])).void }
      def initialize(container: nil, decision: nil, duration: nil, file: nil, has_thumbnail: nil, id: nil, key: nil, selected: nil, size: nil, stream: nil)
        @container = container
        @decision = decision
        @duration = duration
        @file = file
        @has_thumbnail = has_thumbnail
        @id = id
        @key = key
        @selected = selected
        @size = size
        @stream = stream
      end
    end


    class GetSessionsMedia < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :audio_channels, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioChannels') } }

      field :audio_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioCodec') } }

      field :bitrate, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bitrate') } }

      field :container, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('container') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :part, T.nilable(T::Array[Operations::GetSessionsPart]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Part') } }

      field :selected, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('selected') } }


      sig { params(audio_channels: T.nilable(Integer), audio_codec: T.nilable(String), bitrate: T.nilable(Integer), container: T.nilable(String), duration: T.nilable(Integer), id: T.nilable(String), part: T.nilable(T::Array[Operations::GetSessionsPart]), selected: T.nilable(T::Boolean)).void }
      def initialize(audio_channels: nil, audio_codec: nil, bitrate: nil, container: nil, duration: nil, id: nil, part: nil, selected: nil)
        @audio_channels = audio_channels
        @audio_codec = audio_codec
        @bitrate = bitrate
        @container = container
        @duration = duration
        @id = id
        @part = part
        @selected = selected
      end
    end


    class User < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :thumb, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('thumb') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }


      sig { params(id: T.nilable(String), thumb: T.nilable(String), title: T.nilable(String)).void }
      def initialize(id: nil, thumb: nil, title: nil)
        @id = id
        @thumb = thumb
        @title = title
      end
    end


    class Player < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :address, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('address') } }

      field :local, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('local') } }

      field :machine_identifier, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('machineIdentifier') } }

      field :model, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('model') } }

      field :platform, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('platform') } }

      field :platform_version, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('platformVersion') } }

      field :product, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product') } }

      field :profile, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('profile') } }

      field :relayed, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('relayed') } }

      field :remote_public_address, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remotePublicAddress') } }

      field :secure, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('secure') } }

      field :state, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

      field :user_id, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('userID') } }

      field :version, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('version') } }


      sig { params(address: T.nilable(String), local: T.nilable(T::Boolean), machine_identifier: T.nilable(String), model: T.nilable(String), platform: T.nilable(String), platform_version: T.nilable(String), product: T.nilable(String), profile: T.nilable(String), relayed: T.nilable(T::Boolean), remote_public_address: T.nilable(String), secure: T.nilable(T::Boolean), state: T.nilable(String), title: T.nilable(String), user_id: T.nilable(Integer), version: T.nilable(String)).void }
      def initialize(address: nil, local: nil, machine_identifier: nil, model: nil, platform: nil, platform_version: nil, product: nil, profile: nil, relayed: nil, remote_public_address: nil, secure: nil, state: nil, title: nil, user_id: nil, version: nil)
        @address = address
        @local = local
        @machine_identifier = machine_identifier
        @model = model
        @platform = platform
        @platform_version = platform_version
        @product = product
        @profile = profile
        @relayed = relayed
        @remote_public_address = remote_public_address
        @secure = secure
        @state = state
        @title = title
        @user_id = user_id
        @version = version
      end
    end


    class Session < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :bandwidth, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bandwidth') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :location, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('location') } }


      sig { params(bandwidth: T.nilable(Integer), id: T.nilable(String), location: T.nilable(String)).void }
      def initialize(bandwidth: nil, id: nil, location: nil)
        @bandwidth = bandwidth
        @id = id
        @location = location
      end
    end


    class GetSessionsMetadata < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :added_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('addedAt') } }

      field :art, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('art') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :grandparent_art, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('grandparentArt') } }

      field :grandparent_guid, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('grandparentGuid') } }

      field :grandparent_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('grandparentKey') } }

      field :grandparent_rating_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('grandparentRatingKey') } }

      field :grandparent_thumb, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('grandparentThumb') } }

      field :grandparent_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('grandparentTitle') } }

      field :guid, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('guid') } }

      field :index, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('index') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :library_section_id, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionID') } }

      field :library_section_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionKey') } }

      field :library_section_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('librarySectionTitle') } }

      field :media, T.nilable(T::Array[Operations::GetSessionsMedia]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Media') } }

      field :music_analysis_version, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('musicAnalysisVersion') } }

      field :parent_guid, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentGuid') } }

      field :parent_index, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentIndex') } }

      field :parent_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentKey') } }

      field :parent_rating_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentRatingKey') } }

      field :parent_studio, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentStudio') } }

      field :parent_thumb, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentThumb') } }

      field :parent_title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentTitle') } }

      field :parent_year, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('parentYear') } }

      field :player, T.nilable(Operations::Player), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Player') } }

      field :rating_count, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ratingCount') } }

      field :rating_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('ratingKey') } }

      field :session, T.nilable(Operations::Session), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Session') } }

      field :session_key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sessionKey') } }

      field :thumb, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('thumb') } }

      field :title, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

      field :title_sort, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('titleSort') } }

      field :type, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }

      field :updated_at, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updatedAt') } }

      field :user, T.nilable(Operations::User), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('User') } }

      field :view_offset, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('viewOffset') } }


      sig { params(added_at: T.nilable(Integer), art: T.nilable(String), duration: T.nilable(Integer), grandparent_art: T.nilable(String), grandparent_guid: T.nilable(String), grandparent_key: T.nilable(String), grandparent_rating_key: T.nilable(String), grandparent_thumb: T.nilable(String), grandparent_title: T.nilable(String), guid: T.nilable(String), index: T.nilable(Integer), key: T.nilable(String), library_section_id: T.nilable(String), library_section_key: T.nilable(String), library_section_title: T.nilable(String), media: T.nilable(T::Array[Operations::GetSessionsMedia]), music_analysis_version: T.nilable(String), parent_guid: T.nilable(String), parent_index: T.nilable(Integer), parent_key: T.nilable(String), parent_rating_key: T.nilable(String), parent_studio: T.nilable(String), parent_thumb: T.nilable(String), parent_title: T.nilable(String), parent_year: T.nilable(Integer), player: T.nilable(Operations::Player), rating_count: T.nilable(Integer), rating_key: T.nilable(String), session: T.nilable(Operations::Session), session_key: T.nilable(String), thumb: T.nilable(String), title: T.nilable(String), title_sort: T.nilable(String), type: T.nilable(String), updated_at: T.nilable(Integer), user: T.nilable(Operations::User), view_offset: T.nilable(Integer)).void }
      def initialize(added_at: nil, art: nil, duration: nil, grandparent_art: nil, grandparent_guid: nil, grandparent_key: nil, grandparent_rating_key: nil, grandparent_thumb: nil, grandparent_title: nil, guid: nil, index: nil, key: nil, library_section_id: nil, library_section_key: nil, library_section_title: nil, media: nil, music_analysis_version: nil, parent_guid: nil, parent_index: nil, parent_key: nil, parent_rating_key: nil, parent_studio: nil, parent_thumb: nil, parent_title: nil, parent_year: nil, player: nil, rating_count: nil, rating_key: nil, session: nil, session_key: nil, thumb: nil, title: nil, title_sort: nil, type: nil, updated_at: nil, user: nil, view_offset: nil)
        @added_at = added_at
        @art = art
        @duration = duration
        @grandparent_art = grandparent_art
        @grandparent_guid = grandparent_guid
        @grandparent_key = grandparent_key
        @grandparent_rating_key = grandparent_rating_key
        @grandparent_thumb = grandparent_thumb
        @grandparent_title = grandparent_title
        @guid = guid
        @index = index
        @key = key
        @library_section_id = library_section_id
        @library_section_key = library_section_key
        @library_section_title = library_section_title
        @media = media
        @music_analysis_version = music_analysis_version
        @parent_guid = parent_guid
        @parent_index = parent_index
        @parent_key = parent_key
        @parent_rating_key = parent_rating_key
        @parent_studio = parent_studio
        @parent_thumb = parent_thumb
        @parent_title = parent_title
        @parent_year = parent_year
        @player = player
        @rating_count = rating_count
        @rating_key = rating_key
        @session = session
        @session_key = session_key
        @thumb = thumb
        @title = title
        @title_sort = title_sort
        @type = type
        @updated_at = updated_at
        @user = user
        @view_offset = view_offset
      end
    end


    class GetSessionsMediaContainer < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :metadata, T.nilable(T::Array[Operations::GetSessionsMetadata]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Metadata') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }


      sig { params(metadata: T.nilable(T::Array[Operations::GetSessionsMetadata]), size: T.nilable(Integer)).void }
      def initialize(metadata: nil, size: nil)
        @metadata = metadata
        @size = size
      end
    end

    # List of Active Plex Sessions
    class GetSessionsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :media_container, T.nilable(Operations::GetSessionsMediaContainer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('MediaContainer') } }


      sig { params(media_container: T.nilable(Operations::GetSessionsMediaContainer)).void }
      def initialize(media_container: nil)
        @media_container = media_container
      end
    end


    class GetSessionsResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # List of Active Plex Sessions
      field :two_hundred_application_json_object, T.nilable(Operations::GetSessionsResponseBody)
      # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
      field :four_hundred_and_one_application_json_object, T.nilable(Operations::GetSessionsSessionsResponseBody)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, two_hundred_application_json_object: T.nilable(Operations::GetSessionsResponseBody), four_hundred_and_one_application_json_object: T.nilable(Operations::GetSessionsSessionsResponseBody)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, two_hundred_application_json_object: nil, four_hundred_and_one_application_json_object: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @two_hundred_application_json_object = two_hundred_application_json_object
        @four_hundred_and_one_application_json_object = four_hundred_and_one_application_json_object
      end
    end
  end
end
