# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class GetAvailableClientsErrors < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message') } }

      field :status, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }


      sig { params(code: T.nilable(Float), message: T.nilable(String), status: T.nilable(Float)).void }
      def initialize(code: nil, message: nil, status: nil)
        @code = code
        @message = message
        @status = status
      end
    end

    # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
    class GetAvailableClientsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :errors, T.nilable(T::Array[Operations::GetAvailableClientsErrors]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('errors') } }


      sig { params(errors: T.nilable(T::Array[Operations::GetAvailableClientsErrors])).void }
      def initialize(errors: nil)
        @errors = errors
      end
    end


    class Server < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :address, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('address') } }

      field :device_class, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deviceClass') } }

      field :host, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('host') } }

      field :machine_identifier, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('machineIdentifier') } }

      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }

      field :port, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('port') } }

      field :product, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product') } }

      field :protocol, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('protocol') } }

      field :protocol_capabilities, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('protocolCapabilities') } }

      field :protocol_version, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('protocolVersion') } }

      field :version, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('version') } }


      sig { params(address: T.nilable(String), device_class: T.nilable(String), host: T.nilable(String), machine_identifier: T.nilable(String), name: T.nilable(String), port: T.nilable(Float), product: T.nilable(String), protocol: T.nilable(String), protocol_capabilities: T.nilable(String), protocol_version: T.nilable(Float), version: T.nilable(String)).void }
      def initialize(address: nil, device_class: nil, host: nil, machine_identifier: nil, name: nil, port: nil, product: nil, protocol: nil, protocol_capabilities: nil, protocol_version: nil, version: nil)
        @address = address
        @device_class = device_class
        @host = host
        @machine_identifier = machine_identifier
        @name = name
        @port = port
        @product = product
        @protocol = protocol
        @protocol_capabilities = protocol_capabilities
        @protocol_version = protocol_version
        @version = version
      end
    end


    class GetAvailableClientsMediaContainer < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :server, T.nilable(T::Array[Operations::Server]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Server') } }

      field :size, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }


      sig { params(server: T.nilable(T::Array[Operations::Server]), size: T.nilable(Float)).void }
      def initialize(server: nil, size: nil)
        @server = server
        @size = size
      end
    end


    class ResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :media_container, T.nilable(Operations::GetAvailableClientsMediaContainer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('MediaContainer') } }


      sig { params(media_container: T.nilable(Operations::GetAvailableClientsMediaContainer)).void }
      def initialize(media_container: nil)
        @media_container = media_container
      end
    end


    class GetAvailableClientsResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
      field :object, T.nilable(Operations::GetAvailableClientsResponseBody)
      # Available Clients
      field :response_bodies, T.nilable(T::Array[Operations::ResponseBody])


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, object: T.nilable(Operations::GetAvailableClientsResponseBody), response_bodies: T.nilable(T::Array[Operations::ResponseBody])).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, object: nil, response_bodies: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @object = object
        @response_bodies = response_bodies
      end
    end
  end
end
