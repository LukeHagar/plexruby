# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class GetTranscodeSessionsErrors < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message') } }

      field :status, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }


      sig { params(code: T.nilable(Float), message: T.nilable(String), status: T.nilable(Float)).void }
      def initialize(code: nil, message: nil, status: nil)
        @code = code
        @message = message
        @status = status
      end
    end

    # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
    class GetTranscodeSessionsSessionsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :errors, T.nilable(T::Array[Operations::GetTranscodeSessionsErrors]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('errors') } }


      sig { params(errors: T.nilable(T::Array[Operations::GetTranscodeSessionsErrors])).void }
      def initialize(errors: nil)
        @errors = errors
      end
    end


    class TranscodeSession < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :audio_channels, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioChannels') } }

      field :audio_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioCodec') } }

      field :audio_decision, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('audioDecision') } }

      field :complete, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('complete') } }

      field :container, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('container') } }

      field :context, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('context') } }

      field :duration, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('duration') } }

      field :error, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('error') } }

      field :key, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :max_offset_available, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('maxOffsetAvailable') } }

      field :min_offset_available, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('minOffsetAvailable') } }

      field :progress, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('progress') } }

      field :protocol, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('protocol') } }

      field :remaining, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('remaining') } }

      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }

      field :source_audio_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sourceAudioCodec') } }

      field :source_video_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sourceVideoCodec') } }

      field :speed, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('speed') } }

      field :subtitle_decision, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('subtitleDecision') } }

      field :throttled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('throttled') } }

      field :time_stamp, T.nilable(Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('timeStamp') } }

      field :transcode_hw_requested, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transcodeHwRequested') } }

      field :video_codec, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoCodec') } }

      field :video_decision, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('videoDecision') } }


      sig { params(audio_channels: T.nilable(Integer), audio_codec: T.nilable(String), audio_decision: T.nilable(String), complete: T.nilable(T::Boolean), container: T.nilable(String), context: T.nilable(String), duration: T.nilable(Integer), error: T.nilable(T::Boolean), key: T.nilable(String), max_offset_available: T.nilable(Float), min_offset_available: T.nilable(Float), progress: T.nilable(Float), protocol: T.nilable(String), remaining: T.nilable(Integer), size: T.nilable(Integer), source_audio_codec: T.nilable(String), source_video_codec: T.nilable(String), speed: T.nilable(Float), subtitle_decision: T.nilable(String), throttled: T.nilable(T::Boolean), time_stamp: T.nilable(Float), transcode_hw_requested: T.nilable(T::Boolean), video_codec: T.nilable(String), video_decision: T.nilable(String)).void }
      def initialize(audio_channels: nil, audio_codec: nil, audio_decision: nil, complete: nil, container: nil, context: nil, duration: nil, error: nil, key: nil, max_offset_available: nil, min_offset_available: nil, progress: nil, protocol: nil, remaining: nil, size: nil, source_audio_codec: nil, source_video_codec: nil, speed: nil, subtitle_decision: nil, throttled: nil, time_stamp: nil, transcode_hw_requested: nil, video_codec: nil, video_decision: nil)
        @audio_channels = audio_channels
        @audio_codec = audio_codec
        @audio_decision = audio_decision
        @complete = complete
        @container = container
        @context = context
        @duration = duration
        @error = error
        @key = key
        @max_offset_available = max_offset_available
        @min_offset_available = min_offset_available
        @progress = progress
        @protocol = protocol
        @remaining = remaining
        @size = size
        @source_audio_codec = source_audio_codec
        @source_video_codec = source_video_codec
        @speed = speed
        @subtitle_decision = subtitle_decision
        @throttled = throttled
        @time_stamp = time_stamp
        @transcode_hw_requested = transcode_hw_requested
        @video_codec = video_codec
        @video_decision = video_decision
      end
    end


    class GetTranscodeSessionsMediaContainer < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :size, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size') } }

      field :transcode_session, T.nilable(T::Array[Operations::TranscodeSession]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('TranscodeSession') } }


      sig { params(size: T.nilable(Integer), transcode_session: T.nilable(T::Array[Operations::TranscodeSession])).void }
      def initialize(size: nil, transcode_session: nil)
        @size = size
        @transcode_session = transcode_session
      end
    end

    # The Transcode Sessions
    class GetTranscodeSessionsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :media_container, T.nilable(Operations::GetTranscodeSessionsMediaContainer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('MediaContainer') } }


      sig { params(media_container: T.nilable(Operations::GetTranscodeSessionsMediaContainer)).void }
      def initialize(media_container: nil)
        @media_container = media_container
      end
    end


    class GetTranscodeSessionsResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # The Transcode Sessions
      field :two_hundred_application_json_object, T.nilable(Operations::GetTranscodeSessionsResponseBody)
      # Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
      field :four_hundred_and_one_application_json_object, T.nilable(Operations::GetTranscodeSessionsSessionsResponseBody)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, two_hundred_application_json_object: T.nilable(Operations::GetTranscodeSessionsResponseBody), four_hundred_and_one_application_json_object: T.nilable(Operations::GetTranscodeSessionsSessionsResponseBody)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, two_hundred_application_json_object: nil, four_hundred_and_one_application_json_object: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @two_hundred_application_json_object = two_hundred_application_json_object
        @four_hundred_and_one_application_json_object = four_hundred_and_one_application_json_object
      end
    end
  end
end
