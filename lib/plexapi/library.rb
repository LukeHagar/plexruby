# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Library
    # API Calls interacting with Plex Media Server Libraries
    # 
    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(url: String, type: T.nilable(Float)).returns(Utils::FieldAugmented) }
    def get_file_hash(url, type = nil)
      # get_file_hash - Get Hash Value
      # This resource returns hash values for local files
      request = Operations::GetFileHashRequest.new(
        
        url: url,
        type: type
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/library/hashes"
      headers = {}
      query_params = Utils.get_query_params(Operations::GetFileHashRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetFileHashResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetFileHashResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { returns(Utils::FieldAugmented) }
    def get_recently_added
      # get_recently_added - Get Recently Added
      # This endpoint will return the recently added content.
      # 
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/library/recentlyAdded"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetRecentlyAddedResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetRecentlyAddedResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetRecentlyAddedLibraryResponseBody)
          res.four_hundred_and_one_application_json_object = out
        end
      end
      res
    end

    sig { returns(Utils::FieldAugmented) }
    def get_libraries
      # get_libraries - Get All Libraries
      # A library section (commonly referred to as just a library) is a collection of media. 
      # Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media. 
      # For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.
      # 
      # Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts. 
      # This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
      # 
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/library/sections"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetLibrariesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetLibrariesResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(section_id: Float, include_details: T.nilable(Operations::IncludeDetails)).returns(Utils::FieldAugmented) }
    def get_library(section_id, include_details = nil)
      # get_library - Get Library Details
      # Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:
      # 
      # - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:
      #   - Primary: (e.g. all, On Deck) These are still used in some clients to provide "shortcuts" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.
      #   - Secondary: These are marked with `secondary="1"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.
      #   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there's a completely obsolete entry marked `search="1"` which used to be used to allow clients to build search dialogs on the fly.
      # - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won't render any filtering controls. The `Type` object contains:
      #   - `key`: This provides the root endpoint returning the actual media list for the type.
      #   - `type`: This is the metadata type for the type (if a standard Plex type).
      #   - `title`: The title for for the content of this type (e.g. "Movies").
      # - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.
      #   - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.
      #   - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.
      #   - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a "Genre" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.
      #   - `title`: The title for the filter.
      # - Each `Sort` object contains a description of the sort field.
      #   - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).
      #   - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.
      #   - `title`: The title of the field.
      # 
      request = Operations::GetLibraryRequest.new(
        
        section_id: section_id,
        include_details: include_details
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetLibraryRequest,
        base_url,
        '/library/sections/{sectionId}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetLibraryRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetLibraryResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetLibraryResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(section_id: Float).returns(Utils::FieldAugmented) }
    def delete_library(section_id)
      # delete_library - Delete Library Section
      # Delate a library using a specific section
      request = Operations::DeleteLibraryRequest.new(
        
        section_id: section_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::DeleteLibraryRequest,
        base_url,
        '/library/sections/{sectionId}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeleteLibraryResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::DeleteLibraryResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(section_id: Float, type: T.nilable(Float), filter: T.nilable(String)).returns(Utils::FieldAugmented) }
    def get_library_items(section_id, type = nil, filter = nil)
      # get_library_items - Get Library Items
      # This endpoint will return a list of library items filtered by the filter and type provided
      # 
      request = Operations::GetLibraryItemsRequest.new(
        
        section_id: section_id,
        type: type,
        filter: filter
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetLibraryItemsRequest,
        base_url,
        '/library/sections/{sectionId}/all',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetLibraryItemsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetLibraryItemsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetLibraryItemsResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(section_id: Float).returns(Utils::FieldAugmented) }
    def refresh_library(section_id)
      # refresh_library - Refresh Library
      # This endpoint Refreshes the library.
      # 
      request = Operations::RefreshLibraryRequest.new(
        
        section_id: section_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RefreshLibraryRequest,
        base_url,
        '/library/sections/{sectionId}/refresh',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RefreshLibraryResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::RefreshLibraryResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(section_id: Float, type: Float, filter: T.nilable(String)).returns(Utils::FieldAugmented) }
    def get_latest_library_items(section_id, type, filter = nil)
      # get_latest_library_items - Get Latest Library Items
      # This endpoint will return a list of the latest library items filtered by the filter and type provided
      # 
      request = Operations::GetLatestLibraryItemsRequest.new(
        
        section_id: section_id,
        type: type,
        filter: filter
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetLatestLibraryItemsRequest,
        base_url,
        '/library/sections/{sectionId}/latest',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetLatestLibraryItemsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetLatestLibraryItemsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetLatestLibraryItemsResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(section_id: Float, type: Float, filter: T.nilable(String)).returns(Utils::FieldAugmented) }
    def get_common_library_items(section_id, type, filter = nil)
      # get_common_library_items - Get Common Library Items
      # Represents a "Common" item. It contains only the common attributes of the items selected by the provided filter
      # 
      request = Operations::GetCommonLibraryItemsRequest.new(
        
        section_id: section_id,
        type: type,
        filter: filter
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCommonLibraryItemsRequest,
        base_url,
        '/library/sections/{sectionId}/common',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCommonLibraryItemsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCommonLibraryItemsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400, 404].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetCommonLibraryItemsResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(rating_key: Float).returns(Utils::FieldAugmented) }
    def get_metadata(rating_key)
      # get_metadata - Get Items Metadata
      # This endpoint will return the metadata of a library item specified with the ratingKey.
      # 
      request = Operations::GetMetadataRequest.new(
        
        rating_key: rating_key
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetMetadataRequest,
        base_url,
        '/library/metadata/{ratingKey}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetMetadataResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetMetadataResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { params(rating_key: Float).returns(Utils::FieldAugmented) }
    def get_metadata_children(rating_key)
      # get_metadata_children - Get Items Children
      # This endpoint will return the children of of a library item specified with the ratingKey.
      # 
      request = Operations::GetMetadataChildrenRequest.new(
        
        rating_key: rating_key
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetMetadataChildrenRequest,
        base_url,
        '/library/metadata/{ratingKey}/children',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetMetadataChildrenResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [200, 400].include?(r.status)
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetMetadataChildrenResponseBody)
          res.object = out
        end
      end
      res
    end

    sig { returns(Utils::FieldAugmented) }
    def get_on_deck
      # get_on_deck - Get On Deck
      # This endpoint will return the on deck content.
      # 
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/library/onDeck"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetOnDeckResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetOnDeckResponseBody)
          res.two_hundred_application_json_object = out
        end
      elsif r.status == 400
      elsif r.status == 401
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Operations::GetOnDeckLibraryResponseBody)
          res.four_hundred_and_one_application_json_object = out
        end
      end
      res
    end
  end
end
