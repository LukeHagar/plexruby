# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class GetLibrariesDirectory < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :agent, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('agent') } }

      field :allow_sync, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('allowSync') } }

      field :art, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('art') } }

      field :composite, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('composite') } }

      field :content, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('content') } }

      field :content_changed_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contentChangedAt') } }

      field :created_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('createdAt') } }

      field :directory, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('directory') } }

      field :filters, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('filters') } }

      field :hidden, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hidden') } }

      field :key, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('key') } }

      field :language, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('language') } }

      field :location, T.nilable(T::Array[::OpenApiSDK::Operations::GetLibrariesLocation]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('Location') } }

      field :refreshing, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('refreshing') } }

      field :scanned_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('scannedAt') } }

      field :scanner, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('scanner') } }

      field :thumb, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('thumb') } }

      field :title, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }

      field :type, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }

      field :updated_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updatedAt') } }

      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }


      sig { params(agent: T.nilable(::String), allow_sync: T.nilable(T::Boolean), art: T.nilable(::String), composite: T.nilable(::String), content: T.nilable(T::Boolean), content_changed_at: T.nilable(::Integer), created_at: T.nilable(::Integer), directory: T.nilable(T::Boolean), filters: T.nilable(T::Boolean), hidden: T.nilable(::Integer), key: T.nilable(::String), language: T.nilable(::String), location: T.nilable(T::Array[::OpenApiSDK::Operations::GetLibrariesLocation]), refreshing: T.nilable(T::Boolean), scanned_at: T.nilable(::Integer), scanner: T.nilable(::String), thumb: T.nilable(::String), title: T.nilable(::String), type: T.nilable(::String), updated_at: T.nilable(::Integer), uuid: T.nilable(::String)).void }
      def initialize(agent: nil, allow_sync: nil, art: nil, composite: nil, content: nil, content_changed_at: nil, created_at: nil, directory: nil, filters: nil, hidden: nil, key: nil, language: nil, location: nil, refreshing: nil, scanned_at: nil, scanner: nil, thumb: nil, title: nil, type: nil, updated_at: nil, uuid: nil)
        @agent = agent
        @allow_sync = allow_sync
        @art = art
        @composite = composite
        @content = content
        @content_changed_at = content_changed_at
        @created_at = created_at
        @directory = directory
        @filters = filters
        @hidden = hidden
        @key = key
        @language = language
        @location = location
        @refreshing = refreshing
        @scanned_at = scanned_at
        @scanner = scanner
        @thumb = thumb
        @title = title
        @type = type
        @updated_at = updated_at
        @uuid = uuid
      end
    end
  end
end
