# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class Stream < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :bit_depth, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bitDepth') } }

      field :bitrate, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bitrate') } }

      field :channels, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('channels') } }

      field :chroma_location, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('chromaLocation') } }

      field :chroma_subsampling, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('chromaSubsampling') } }

      field :codec, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('codec') } }

      field :coded_height, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('codedHeight') } }

      field :coded_width, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('codedWidth') } }

      field :color_primaries, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('colorPrimaries') } }

      field :color_range, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('colorRange') } }

      field :color_space, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('colorSpace') } }

      field :color_trc, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('colorTrc') } }

      field :default, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('default') } }

      field :display_title, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('displayTitle') } }

      field :extended_display_title, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('extendedDisplayTitle') } }

      field :frame_rate, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('frameRate') } }

      field :has_scaling_matrix, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hasScalingMatrix') } }

      field :height, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('height') } }

      field :id, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :index, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('index') } }

      field :language, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('language') } }

      field :language_code, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('languageCode') } }

      field :language_tag, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('languageTag') } }

      field :level, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('level') } }

      field :profile, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('profile') } }

      field :ref_frames, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('refFrames') } }

      field :sampling_rate, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('samplingRate') } }

      field :scan_type, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('scanType') } }

      field :selected, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('selected') } }

      field :stream_identifier, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('streamIdentifier') } }

      field :stream_type, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('streamType') } }

      field :width, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('width') } }


      sig { params(bit_depth: T.nilable(::Integer), bitrate: T.nilable(::Integer), channels: T.nilable(::Integer), chroma_location: T.nilable(::String), chroma_subsampling: T.nilable(::String), codec: T.nilable(::String), coded_height: T.nilable(::Integer), coded_width: T.nilable(::Integer), color_primaries: T.nilable(::String), color_range: T.nilable(::String), color_space: T.nilable(::String), color_trc: T.nilable(::String), default: T.nilable(T::Boolean), display_title: T.nilable(::String), extended_display_title: T.nilable(::String), frame_rate: T.nilable(::Integer), has_scaling_matrix: T.nilable(T::Boolean), height: T.nilable(::Integer), id: T.nilable(::Integer), index: T.nilable(::Integer), language: T.nilable(::String), language_code: T.nilable(::String), language_tag: T.nilable(::String), level: T.nilable(::Integer), profile: T.nilable(::String), ref_frames: T.nilable(::Integer), sampling_rate: T.nilable(::Integer), scan_type: T.nilable(::String), selected: T.nilable(T::Boolean), stream_identifier: T.nilable(::String), stream_type: T.nilable(::Integer), width: T.nilable(::Integer)).void }
      def initialize(bit_depth: nil, bitrate: nil, channels: nil, chroma_location: nil, chroma_subsampling: nil, codec: nil, coded_height: nil, coded_width: nil, color_primaries: nil, color_range: nil, color_space: nil, color_trc: nil, default: nil, display_title: nil, extended_display_title: nil, frame_rate: nil, has_scaling_matrix: nil, height: nil, id: nil, index: nil, language: nil, language_code: nil, language_tag: nil, level: nil, profile: nil, ref_frames: nil, sampling_rate: nil, scan_type: nil, selected: nil, stream_identifier: nil, stream_type: nil, width: nil)
        @bit_depth = bit_depth
        @bitrate = bitrate
        @channels = channels
        @chroma_location = chroma_location
        @chroma_subsampling = chroma_subsampling
        @codec = codec
        @coded_height = coded_height
        @coded_width = coded_width
        @color_primaries = color_primaries
        @color_range = color_range
        @color_space = color_space
        @color_trc = color_trc
        @default = default
        @display_title = display_title
        @extended_display_title = extended_display_title
        @frame_rate = frame_rate
        @has_scaling_matrix = has_scaling_matrix
        @height = height
        @id = id
        @index = index
        @language = language
        @language_code = language_code
        @language_tag = language_tag
        @level = level
        @profile = profile
        @ref_frames = ref_frames
        @sampling_rate = sampling_rate
        @scan_type = scan_type
        @selected = selected
        @stream_identifier = stream_identifier
        @stream_type = stream_type
        @width = width
      end
    end
  end
end
